---
name: Integration
on:
  push:
    branches:
      - '**'
    tags:
      - 'v*'

jobs:
  setenv:
    name: Set the environment
    runs-on: ubuntu-latest
    outputs:
      env_name: ${{ steps.branch_check.outputs.env_name }}
    steps:
      - name: Determine destination environment
        id: branch_check
        run: |
          if [ "${{ github.ref }}" = "refs/tags/v*" ]; then
            echo "::set-output name=env_name::production"
          elif [ "${{ github.ref }}" = "refs/heads/master" ]; then
            echo "::set-output name=env_name::staging"
          else
            echo "::set-output name=env_name::test"
          fi

  build:
    name: Test and build
    runs-on: ubuntu-latest
    needs:
      - setenv
    environment:
      name: needs.setenv.outputs.env_name
    env:
      dir_backend: ./packages/fantasion-backend
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: '16'
      - uses: actions/setup-python@v2
        with:
          python-version: 3.10.1
      - uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: 1.1.12
      - uses: actions/cache@v1
        with:
          path: |
            ~/.npm
            ~/.cache/pypoetry
            .next/cache
          key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        run: |
          npm ci
          sudo apt-get install -y gettext
      - name: Check coding style
        working-directory: ${{env.dir_backend}}
        run: poetry run flake8
      - name: Run backend tests
        working-directory: ${{env.dir_backend}}
        run: poetry run ./manage.py test
      - name: Run frontend tests
        run: npm run test -- --coverage
      - name: Build all packages
        run: NODE_ENV=production npm run build
        env:
          NODE_ENV: production
          STATIC_ROOT: https://storage.googleapis.com/${{secrets.BUCKET_PUBLIC}}
      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: |
            packages/fantasion-backend/dist/
            packages/fantasion-web/.next
            packages/fantasion-web/*.tgz

  terraform:
    name: Deploy terraform resources
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs:
      - setenv
      - build
    environment:
      name: needs.setenv.outputs.env_name
    steps:
      - uses: docker/setup-qemu-action@v1
      - uses: docker/setup-buildx-action@v1
      - uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_version: 1.1.2
          terraform_wrapper: false
      - uses: actions/setup-node@v1
        with:
          node-version: '16'
      - uses: actions/setup-python@v2
        with:
          python-version: 3.10.1
      - uses: abatilo/actions-poetry@v2.0.0
        with:
          poetry-version: 1.1.12
      - uses: actions/checkout@v2
      - uses: actions/cache@v1
        with:
          path: |
            ~/.npm
            ~/.cache/pypoetry
            .next/cache
          key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        run: npm ci
      - uses: actions/download-artifact@v2
        with:
          name: dist
          path: packages
      - name: Deploy app
        working-directory: ./terraform
        env:
          GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
          GS_CREDENTIALS: ${{ secrets.GS_CREDENTIALS }}
          TF_VAR_BUCKET_PUBLIC: ${{ secrets.BUCKET_PUBLIC }}
          TF_VAR_DB_PASS: ${{ secrets.DB_PASS }}
          TF_VAR_DB_USER: ${{ secrets.DB_USER }}
          TF_VAR_GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
          TF_VAR_GCP_USER: ${{ secrets.GCP_USER }}
          TF_VAR_SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          export GOOGLE_CREDENTIALS=$(echo $GCP_CREDENTIALS | base64 -d)
          terraform init
          terraform validate
          terraform workspace select ${{ secrets.PROJECT_ENVIRONMENT }}
          terraform apply \
            --var "GCP_CREDENTIALS=$(echo $GCP_CREDENTIALS | base64 -d)" \
            --var "GS_CREDENTIALS=$(echo $GS_CREDENTIALS | base64 -d)" \
            --auto-approve
